"use strict";

/**
 * Created by daniel on 20.11.15.
 */

var sheetsApp = angular.module("sheetsApp", []);

/**
 * Created by daniel on 22.11.15.
 */
sheetsApp.factory("Sheets", function () {

    var sheets = [{
        id: 1,
        title: "linux commands",
        content: "ls -l"
    }, {
        id: 2,
        title: "CSS3 flex overview",
        content: "justify-conent etc."
    }, {
        id: 3,
        title: "some todo list",
        content: "buy milk"
    }, {
        id: 4,
        title: "URL shortener",
        content: "tiny.cc"
    }, {
        id: 5,
        title: "Another List",
        content: "- this and that"
    }, {
        id: 6,
        title: "wasteland survival tips",
        content: "1. keep hydrated"
    }];

    var sheetsFac = {};

    sheetsFac.getAll = function () {
        return sheets;
    };

    return sheetsFac;
});
/**
 * Created by daniel on 21.11.15.
 */
sheetsApp.directive("sheetGrid", function (Sheets) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            sheets: "=",
            sheetsPerRow: "=sheetsPerRow"
        },
        templateUrl: "/modules/common/directives/sheetgrid/sheetgrid.html",
        link: function link(scope) {
            scope.sheetsPerRow = Number(scope.sheetsPerRow) || 4;
            scope.rows = [];

            scope.sheets = Sheets.getAll();

            var currentRow = [];
            scope.sheets.forEach(function (sheet, index) {
                currentRow.push(sheet);
                if (currentRow.length === scope.sheetsPerRow || index === scope.sheets.length - 1) {
                    scope.rows.push(currentRow);
                    currentRow = [];
                }
            });
        }
    };
});
/**
 * Created by daniel on 21.11.15.
 */
sheetsApp.directive("sheet", function () {
    return {
        restrict: "E",
        replace: true,
        scope: {
            "sheet": "=data"
        },
        templateUrl: "/modules/common/directives/sheet/sheet.html",
        link: function link(scope) {}
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbW1vbi9mYWN0b3JpZXMvc2hlZXQuZmFjdG9yeS5qcyIsImNvbW1vbi9kaXJlY3RpdmVzL3NoZWV0Z3JpZC9zaGVldGdyaWQuZGlyZWN0aXZlLmpzIiwiY29tbW9uL2RpcmVjdGl2ZXMvc2hlZXQvc2hlZXQuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsV0FBQSxFQUFBLEVBQUEsQ0FBQTs7Ozs7QUFBQSxBQ0RBLFNBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxFQUFBLFlBQUE7O0FBRUEsUUFBQSxNQUFBLEdBQUEsQ0FDQTtBQUNBLFVBQUEsRUFBQSxDQUFBO0FBQ0EsYUFBQSxFQUFBLGdCQUFBO0FBQ0EsZUFBQSxFQUFBLE9BQUE7S0FDQSxFQUNBO0FBQ0EsVUFBQSxFQUFBLENBQUE7QUFDQSxhQUFBLEVBQUEsb0JBQUE7QUFDQSxlQUFBLEVBQUEscUJBQUE7S0FDQSxFQUNBO0FBQ0EsVUFBQSxFQUFBLENBQUE7QUFDQSxhQUFBLEVBQUEsZ0JBQUE7QUFDQSxlQUFBLEVBQUEsVUFBQTtLQUNBLEVBQ0E7QUFDQSxVQUFBLEVBQUEsQ0FBQTtBQUNBLGFBQUEsRUFBQSxlQUFBO0FBQ0EsZUFBQSxFQUFBLFNBQUE7S0FDQSxFQUNBO0FBQ0EsVUFBQSxFQUFBLENBQUE7QUFDQSxhQUFBLEVBQUEsY0FBQTtBQUNBLGVBQUEsRUFBQSxpQkFBQTtLQUNBLEVBQ0E7QUFDQSxVQUFBLEVBQUEsQ0FBQTtBQUNBLGFBQUEsRUFBQSx5QkFBQTtBQUNBLGVBQUEsRUFBQSxrQkFBQTtLQUNBLENBQ0EsQ0FBQTs7QUFFQSxRQUFBLFNBQUEsR0FBQSxFQUFBLENBQUE7O0FBRUEsYUFBQSxDQUFBLE1BQUEsR0FBQSxZQUFBO0FBQ0EsZUFBQSxNQUFBLENBQUE7S0FDQSxDQUFBOztBQUVBLFdBQUEsU0FBQSxDQUFBO0NBRUEsQ0FBQTs7OztBQUFBLEFDM0NBLFNBQUEsQ0FBQSxTQUFBLENBQUEsV0FBQSxFQUFBLFVBQUEsTUFBQSxFQUFBO0FBQ0EsV0FBQTtBQUNBLGdCQUFBLEVBQUEsR0FBQTtBQUNBLGVBQUEsRUFBQSxJQUFBO0FBQ0EsYUFBQSxFQUFBO0FBQ0Esa0JBQUEsRUFBQSxHQUFBO0FBQ0Esd0JBQUEsRUFBQSxlQUFBO1NBQ0E7QUFDQSxtQkFBQSxFQUFBLHFEQUFBO0FBQ0EsWUFBQSxFQUFBLGNBQUEsS0FBQSxFQUFBO0FBQ0EsaUJBQUEsQ0FBQSxZQUFBLEdBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxZQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxpQkFBQSxDQUFBLElBQUEsR0FBQSxFQUFBLENBQUE7O0FBRUEsaUJBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBOztBQUVBLGdCQUFBLFVBQUEsR0FBQSxFQUFBLENBQUE7QUFDQSxpQkFBQSxDQUFBLE1BQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBO0FBQ0EsMEJBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7QUFDQSxvQkFBQSxVQUFBLENBQUEsTUFBQSxLQUFBLEtBQUEsQ0FBQSxZQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsRUFBQTtBQUNBLHlCQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTtBQUNBLDhCQUFBLEdBQUEsRUFBQSxDQUFBO2lCQUNBO2FBQ0EsQ0FBQSxDQUFBO1NBRUE7S0FDQSxDQUFBO0NBQ0EsQ0FBQTs7OztBQUFBLEFDMUJBLFNBQUEsQ0FBQSxTQUFBLENBQUEsT0FBQSxFQUFBLFlBQUE7QUFDQSxXQUFBO0FBQ0EsZ0JBQUEsRUFBQSxHQUFBO0FBQ0EsZUFBQSxFQUFBLElBQUE7QUFDQSxhQUFBLEVBQUE7QUFDQSxtQkFBQSxFQUFBLE9BQUE7U0FDQTtBQUNBLG1CQUFBLEVBQUEsNkNBQUE7QUFDQSxZQUFBLEVBQUEsY0FBQSxLQUFBLEVBQUEsRUFDQTtLQUNBLENBQUE7Q0FDQSxDQUFBLENBQUEiLCJmaWxlIjoic2hlZXRzLWJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBkYW5pZWwgb24gMjAuMTEuMTUuXG4gKi9cblxubGV0IHNoZWV0c0FwcCA9IGFuZ3VsYXIubW9kdWxlKFwic2hlZXRzQXBwXCIsIFtdKTtcblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRhbmllbCBvbiAyMi4xMS4xNS5cbiAqL1xuc2hlZXRzQXBwLmZhY3RvcnkoXCJTaGVldHNcIiwgKCkgPT4ge1xuXG4gICAgbGV0IHNoZWV0cyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICB0aXRsZTogXCJsaW51eCBjb21tYW5kc1wiLFxuICAgICAgICAgICAgY29udGVudDogXCJscyAtbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgdGl0bGU6IFwiQ1NTMyBmbGV4IG92ZXJ2aWV3XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcImp1c3RpZnktY29uZW50IGV0Yy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMyxcbiAgICAgICAgICAgIHRpdGxlOiBcInNvbWUgdG9kbyBsaXN0XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcImJ1eSBtaWxrXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDQsXG4gICAgICAgICAgICB0aXRsZTogXCJVUkwgc2hvcnRlbmVyXCIsXG4gICAgICAgICAgICBjb250ZW50OiBcInRpbnkuY2NcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogNSxcbiAgICAgICAgICAgIHRpdGxlOiBcIkFub3RoZXIgTGlzdFwiLFxuICAgICAgICAgICAgY29udGVudDogXCItIHRoaXMgYW5kIHRoYXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogNixcbiAgICAgICAgICAgIHRpdGxlOiBcIndhc3RlbGFuZCBzdXJ2aXZhbCB0aXBzXCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIjEuIGtlZXAgaHlkcmF0ZWRcIlxuICAgICAgICB9XG4gICAgXTtcblxuICAgIGxldCBzaGVldHNGYWMgPSB7fTtcblxuICAgIHNoZWV0c0ZhYy5nZXRBbGwgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGVldHM7XG4gICAgfTtcblxuICAgIHJldHVybiBzaGVldHNGYWM7XG5cbn0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSBkYW5pZWwgb24gMjEuMTEuMTUuXG4gKi9cbnNoZWV0c0FwcC5kaXJlY3RpdmUoXCJzaGVldEdyaWRcIiwgKFNoZWV0cykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHNoZWV0czogXCI9XCIsXG4gICAgICAgICAgICBzaGVldHNQZXJSb3c6IFwiPXNoZWV0c1BlclJvd1wiXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiBcIi9tb2R1bGVzL2NvbW1vbi9kaXJlY3RpdmVzL3NoZWV0Z3JpZC9zaGVldGdyaWQuaHRtbFwiLFxuICAgICAgICBsaW5rOiAoc2NvcGUpID0+IHtcbiAgICAgICAgICAgIHNjb3BlLnNoZWV0c1BlclJvdyA9IE51bWJlcihzY29wZS5zaGVldHNQZXJSb3cpIHx8IDQ7XG4gICAgICAgICAgICBzY29wZS5yb3dzID0gW107XG5cbiAgICAgICAgICAgIHNjb3BlLnNoZWV0cyA9IFNoZWV0cy5nZXRBbGwoKTtcblxuICAgICAgICAgICAgbGV0IGN1cnJlbnRSb3cgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlLnNoZWV0cy5mb3JFYWNoKChzaGVldCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Um93LnB1c2goc2hlZXQpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Um93Lmxlbmd0aCA9PT0gc2NvcGUuc2hlZXRzUGVyUm93IHx8IGluZGV4ID09PSBzY29wZS5zaGVldHMubGVuZ3RoIC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnJvd3MucHVzaChjdXJyZW50Um93KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJvdyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICB9O1xufSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRhbmllbCBvbiAyMS4xMS4xNS5cbiAqL1xuc2hlZXRzQXBwLmRpcmVjdGl2ZShcInNoZWV0XCIsICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcInNoZWV0XCI6IFwiPWRhdGFcIlxuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZVVybDogXCIvbW9kdWxlcy9jb21tb24vZGlyZWN0aXZlcy9zaGVldC9zaGVldC5odG1sXCIsXG4gICAgICAgIGxpbms6IChzY29wZSkgPT4ge1xuICAgICAgICB9XG4gICAgfTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
